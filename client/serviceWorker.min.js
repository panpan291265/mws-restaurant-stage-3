const cachePrefix="resto-revs",cacheVersion="v0001",cacheName="resto-revs-v0001";self.addEventListener("install",e=>{e.waitUntil(caches.open(cacheName).then(function(e){let s=["index.html","restaurant.html","unavailable.html","img/restaurant-128.png","img/restaurant-256.png","img/restaurant-512.png","img/restaurant.png","css/styles.common.css","css/styles.common.min.css","css/styles.index.css","css/styles.index.min.css","css/styles.restaurant.css","css/styles.restaurant.min.css","js/idb.js","js/idb.min.js","js/urlhelper.js","js/urlhelper.min.js","js/dbhelper.js","js/dbhelper.min.js","js/main.js","js/main.min.js","js/restaurant_info.js","js/restaurant_info.min.js"];const t=["","-200","-300","-400","-500","-600"];return["1","2","3","4","5","6","7","8","9","10","image-not-found"].forEach(e=>{t.forEach(t=>s.push(`img/${e}${t}.jpg`))}),e.addAll(s).then(()=>self.skipWaiting())}).catch(e=>console.error(e)))}),self.addEventListener("activate",e=>{}),self.addEventListener("fetch",e=>{const s=new Promise((s,t)=>{caches.open(cacheName).then(a=>{let n=e.request.url;a.match(n).then(r=>{if(r)return s(r);fetch(e.request).then(e=>(a.put(n,e.clone()),s(e))).catch(n=>{if(!e.request.url.includes("restaurant.html?id="))return t(n);a.match("unavailable.html").then(e=>s(e))})})})});e.respondWith(s)}),self.addEventListener("message",e=>{"cacheRestaurantSites"===e.data.action&&e.data.restaurants&&e.data.restaurants.length>0&&caches.open(cacheName).then(function(s){let t=[];e.data.restaurants.forEach(e=>{t.push(`restaurant.html?id=${e.id}`)}),s.addAll(t)})});