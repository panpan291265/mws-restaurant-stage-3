const dbVersion=1;let dbPromise=null,syncCounter=0;class DBHelper{static get DATASERVICES_URL(){return"http://localhost:1337"}static get DATASERVICE_RESTAURANTS_URL(){return`${DBHelper.DATASERVICES_URL}/restaurants`}static get DATASERVICE_REVIEWS_URL(){return`${DBHelper.DATASERVICES_URL}/reviews`}static openDB(){return idb.open("restorevs",dbVersion,e=>{e.createObjectStore("restaurants",{keyPath:"id"}),e.createObjectStore("reviews",{keyPath:"id"})})}static fetchRestaurants(e,t=!1){dbPromise.then(r=>{r.transaction("restaurants").objectStore("restaurants").getAll().then(n=>{e&&e(null,n),t&&fetch(DBHelper.DATASERVICE_RESTAURANTS_URL).then(e=>e.json()).then(t=>{const n=r.transaction("restaurants","readwrite");n.objectStore("restaurants").clear().then(()=>{t.forEach(e=>{n.objectStore("restaurants").put(e)})}),e&&e(null,t)}).catch(t=>{console.log(t),e&&e(null,n)})})}).catch(t=>{e?e(t):console.log(t)})}static fetchReviews(e,t=!1){dbPromise.then(r=>{r.transaction("reviews").objectStore("reviews").getAll().then(n=>{e&&e(null,n),t&&fetch(DBHelper.DATASERVICE_REVIEWS_URL).then(e=>e.json()).then(t=>{const n=r.transaction("reviews","readwrite");n.objectStore("reviews").clear().then(()=>{t.forEach(e=>{n.objectStore("reviews").put(e)})}),e&&e(null,t)}).catch(t=>{console.log(t),e&&e(null,n)})})}).catch(t=>{e?e(t):console.log(t)})}static fetchRestaurantById(e,t){dbPromise.then(r=>{if(e)try{e=parseInt(e)}catch(t){console.log(t),e=null}r.transaction("restaurants").objectStore("restaurants").get(e).then(r=>{r?DBHelper.fetchRestaurantReviews(r.id,(e,n)=>{r.reviews=n,t&&t(null,r)}):t(`Restaurant with id '${e}' could not be found.`)}).catch(e=>{t?t(e):console.log(e)})})}static fetchReviewById(e,t){dbPromise.then(r=>{if(e)try{e=parseInt(e)}catch(t){console.log(t),e=null}r.transaction("reviews").objectStore("reviews").get(e).then(r=>{r?t&&t(null,r):t(`Review with id '${e}' could not be found.`)}).catch(e=>{t?t(e):console.log(e)})})}static fetchRestaurantReviews(e,t){dbPromise.then(r=>{if(e)try{e=parseInt(e)}catch(t){console.log(t),e=null}r.transaction("reviews").objectStore("reviews").getAll().then(r=>{r&&r.length>0&&(r=r.filter(t=>t.restaurant_id===e)).sort((e,t)=>e.updatedAt<t.updatedAt?1:e.updatedAt>t.updatedAt?-1:e.createdAt<t.createdAt?1:e.createdAt>t.createdAt?-1:0),t&&t(null,r)}).catch(e=>{t?t(e,null):console.log(e)})})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.cuisine_type==e);t(null,r)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.neighborhood==e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){DBHelper.fetchRestaurants((n,a)=>{if(n)r(n,null);else{let n=a;"all"!=e&&(n=n.filter(t=>t.cuisine_type==e)),"all"!=t&&(n=n.filter(e=>e.neighborhood==t)),r(null,n)}})}static fetchNeighborhoods(e){dbPromise.then(t=>{t.transaction("restaurants").objectStore("restaurants").getAll().then(t=>{const r=t.map((e,r)=>t[r].neighborhood),n=r.filter((e,t)=>r.indexOf(e)==t);e&&e(null,n)}).catch(t=>{e?e(t,null):console.log(t)})})}static fetchCuisines(e){dbPromise.then(t=>{t.transaction("restaurants").objectStore("restaurants").getAll().then(t=>{const r=t.map((e,r)=>t[r].cuisine_type),n=r.filter((e,t)=>r.indexOf(e)==t);e&&e(null,n)}).catch(t=>{e?e(t,null):console.log(t)})})}static urlForRestaurant(e){return`${UrlHelper.ROOT_URL}restaurant.html?id=${e.id}`}static urlForRestaurantReview(e,t){let r=`${UrlHelper.ROOT_URL}restaurant_review.html?restaurant_id=${e.id}`;return t&&(r+=`&review_id=${t.id}`),r}static imageUrlForRestaurant(e,t=null){let r=e.photograph;return r||(r="image-not-found"),r.endsWith(".jpg")||(r+=".jpg"),t&&(r=r.replace(/.jpg$/,`${t}.jpg`)),`${UrlHelper.ROOT_URL}img/${r}`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}static isFavoriteRestaurant(e){return!!e&&!(!e.is_favorite||"true"!==e.is_favorite.toString().toLowerCase())}static toggleFavoriteRestaurant(e,t){const r=DBHelper.isFavoriteRestaurant(e);e.is_favorite=!r,e.updatedAt=(new Date).toISOString(),dbPromise.then(r=>{const n=r.transaction("restaurants","readwrite");return n.objectStore("restaurants").put(e),t&&t(null,e),DBHelper.registerDataSync(),n.complete})}static registerDataSync(){navigator.serviceWorker&&navigator.serviceWorker.ready.then(e=>e.sync.register(`sync-${++syncCounter}`)).catch(e=>{console.error("Error registering service worker:",e)})}static synchronizeData(){const e=navigator.connection||navigator.mozConnection||navigator.webkitConnection;return!e||!e.effectiveType||e.downlink<=0?Promise.resolve(!1):DBHelper.synchronizeRestaurants().then(()=>DBHelper.synchronizeRestaurantReviews()).then(()=>!0).catch(e=>(console.log(e),!1))}static synchronizeRestaurants(){return fetch(DBHelper.DATASERVICE_RESTAURANTS_URL).then(e=>e.json()).then(e=>dbPromise.then(t=>{let r=[];const n=t.transaction("restaurants","readwrite");return n.objectStore("restaurants").getAll().then(t=>(t.forEach(t=>{const a=e.find(e=>e.id===t.id),o=new Date(a.updatedAt),s=new Date(t.updatedAt);o>s?(console.log(`updating local restaurant ${t.id} - ${t.name}`),n.objectStore("restaurants").put(a)):o<s&&(console.log(`updating server restaurant ${a.id} - ${a.name}`),r.push(fetch(`${DBHelper.DATASERVICE_RESTAURANTS_URL}/${a.id}?is_favorite=${!!t.is_favorite}`,{method:"PUT"})))}),n.complete.then(()=>r&&r.length>0?Promise.all(r):Promise.resolve())))}).catch(e=>(console.log(e),Promise.reject(e)))).catch(e=>(console.log(e),Promise.reject(e)))}static synchronizeRestaurantReviews(){return fetch(DBHelper.DATASERVICE_REVIEWS_URL).then(e=>e.json()).then(e=>dbPromise.then(t=>{let r=[];const n=t.transaction("reviews","readwrite");n.objectStore("reviews").getAll().then(a=>(a.forEach(t=>{const a=e.find(e=>e.id===t.id);a?a.updatedAt>t.updatedAt?n.objectStore("reviews").put(a):a.updatedAt<t.updatedAt&&r.push(fetch(`${DBHelper.DATASERVICE_REVIEWS_URL}/${a.id}`,{method:"PUT",headers:{"content-type":"application/json"},body:{name:t.name,rating:t.rating,comments:t.comments}})):DBHelper.isLocalReview(t)?r.push(fetch(DBHelper.DATASERVICE_REVIEWS_URL,{method:"POST",headers:{"content-type":"application/json"},body:{restaurant_id:t.restaurant_id,name:t.name,rating:t.rating,comments:t.comments}})):n.objectStore("reviews").delete(t.id)}),e.forEach(e=>{a.find(t=>t.id===e.id)||r.push(fetch(`${DBHelper.DATASERVICE_REVIEWS_URL}/${e.id}`,{method:"DELETE"}))}),n.complete.then(()=>{let e=null;return(e=r&&r.length>0?Promise.all(r):Promise.resolve()).then(()=>{const e=t.transaction("reviews","readwrite");return e.objectStore("reviews").getAll().then(t=>{t.forEach(t=>{DBHelper.isLocalReview(t)&&e.objectStore("reviews").delete(t.id)})}),e.complete})})))}).catch(e=>(console.log(e),Promise.reject(e)))).catch(e=>(console.log(e),Promise.reject(e)))}static isLocalReview(e){if(!e)throw new Error("isLocalReview: invalid review object!");return!e.id||e.id<0}static getNewReview(e=null){let t=localStorage.getItem("lastLocalReviewId");t=null==t?0:parseInt(t);const r={id:--t,restaurant_id:e?e.id:null,name:null,rating:0,comments:null,createdAt:new Date,updatedAt:new Date};return localStorage.setItem("lastLocalReviewId",t),r}static saveReview(e){return e?e.restaurant_id?e.name?void 0===e.rating||null===e.rating?Promise.reject("saveReview: review rating field is required!"):e.rating<0||e.rating>5?Promise.reject("saveReview: review rating field must have a value between 0 and 5!"):e.comments?dbPromise.then(t=>{const r=t.transaction("reviews","readwrite");return r.objectStore("reviews").put(e),r.complete}):Promise.reject("saveReview: review comments field is required!"):Promise.reject("saveReview: review name field is required!"):Promise.reject("saveReview: restaurant id field is required!"):Promise.reject("saveReview: invalid review object!")}static deleteReview(e){return e?dbPromise.then(t=>{const r=t.transaction("reviews","readwrite");return r.objectStore("reviews").delete(e.id),r.complete}):Promise.reject("saveReview: invalid review object!")}}dbPromise=DBHelper.openDB();