const dbVersion=1;let dbPromise=null;class DBHelper{static get DATASERVICES_URL(){return"http://localhost:1337"}static get DATASERVICE_RESTAURANTS_URL(){return`${DBHelper.DATASERVICES_URL}/restaurants`}static get DATASERVICE_REVIEWS_URL(){return`${DBHelper.DATASERVICES_URL}/reviews`}static openDB(){return idb.open("restorevs",dbVersion,e=>{e.createObjectStore("restaurants",{keyPath:"id"}),e.createObjectStore("reviews",{keyPath:"id"})})}static fetchRestaurants(e,t=!1){dbPromise.then(r=>{r.transaction("restaurants").objectStore("restaurants").getAll().then(n=>{e&&e(null,n),t&&fetch(DBHelper.DATASERVICE_RESTAURANTS_URL).then(e=>e.json()).then(t=>{const n=r.transaction("restaurants","readwrite");n.objectStore("restaurants").clear().then(()=>{t.forEach(e=>{n.objectStore("restaurants").put(e)})}),e&&e(null,t)}).catch(t=>{console.log(t),e&&e(null,n)})})}).catch(t=>{e?e(t):console.log(t)})}static fetchReviews(e,t=!1){dbPromise.then(r=>{r.transaction("reviews").objectStore("reviews").getAll().then(n=>{e&&e(null,n),t&&fetch(DBHelper.DATASERVICE_REVIEWS_URL).then(e=>e.json()).then(t=>{const n=r.transaction("reviews","readwrite");n.objectStore("reviews").clear().then(()=>{t.forEach(e=>{n.objectStore("reviews").put(e)})}),e&&e(null,t)}).catch(t=>{console.log(t),e&&e(null,n)})})}).catch(t=>{e?e(t):console.log(t)})}static fetchRestaurantById(e,t){dbPromise.then(r=>{if(e)try{e=parseInt(e)}catch(t){console.log(t),e=null}r.transaction("restaurants").objectStore("restaurants").get(e).then(r=>{r?DBHelper.fetchRestaurantReviews(r.id,(e,n)=>{r.reviews=n,t&&t(null,r)}):t(`Restaurant with id '${e}' could not be found.`,null)}).catch(e=>{t?t(e,null):console.log(e)})})}static fetchRestaurantReviews(e,t){dbPromise.then(r=>{if(e)try{e=parseInt(e)}catch(t){console.log(t),e=null}r.transaction("reviews").objectStore("reviews").getAll().then(r=>{r&&r.length>0&&(r=r.filter(t=>t.restaurant_id===e)),t&&t(null,r)}).catch(e=>{t?t(e,null):console.log(e)})})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.cuisine_type==e);t(null,r)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.neighborhood==e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){DBHelper.fetchRestaurants((n,a)=>{if(n)r(n,null);else{let n=a;"all"!=e&&(n=n.filter(t=>t.cuisine_type==e)),"all"!=t&&(n=n.filter(e=>e.neighborhood==t)),r(null,n)}})}static fetchNeighborhoods(e){dbPromise.then(t=>{t.transaction("restaurants").objectStore("restaurants").getAll().then(t=>{const r=t.map((e,r)=>t[r].neighborhood),n=r.filter((e,t)=>r.indexOf(e)==t);e&&e(null,n)}).catch(t=>{e?e(t,null):console.log(t)})})}static fetchCuisines(e){dbPromise.then(t=>{t.transaction("restaurants").objectStore("restaurants").getAll().then(t=>{const r=t.map((e,r)=>t[r].cuisine_type),n=r.filter((e,t)=>r.indexOf(e)==t);e&&e(null,n)}).catch(t=>{e?e(t,null):console.log(t)})})}static urlForRestaurant(e){return`${UrlHelper.ROOT_URL}restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e,t=null){let r=e.photograph;return r||(r="image-not-found"),r.endsWith(".jpg")||(r+=".jpg"),t&&(r=r.replace(/.jpg$/,`${t}.jpg`)),`${UrlHelper.ROOT_URL}img/${r}`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}}dbPromise=DBHelper.openDB();